1.工厂模式
    综述：工厂模式（factory pattern）是java中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了创建对象的最佳方式。
    在工厂模式中，我们在创建对象的时候，不会对客户端暴露逻辑，并且是通过使用一个共同的接口指向新创建的对象。

2.介绍
    2.1 意图：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。
    2.2 主要解决：主要解决接口选择的问题。
    2.3 何时使用：我们明确地计划不同条件下创建不同实例时。
    2.4 如何解决：让其子类实现工厂接口，返回的也是一个抽象的产品。
    2.5 关键代码：创建过程在其子类执行。
    2.6 应用实例：
        1. 你需要一辆汽车，可以直接中工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。
        2. Hibernate换数据库只需换方言和驱动就可以了。
    2.7 优点：
        1. 一个调用者想创建一个对象，只要知道其名称就可以了。
        2. 扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。
        3。屏蔽产品的具体实现，调用者只关心产品的接口。
    2.8 缺点：每次增加一个产品时，都需要增加一个具体类型和工厂类型实现，使得系统中的类的个数成倍增加，在一定程度上增加了系统的复杂性，同时也增加了系统具体类的依赖，not good！
   *2.9 使用场景：
        1. 日志记录器：记录可能到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志的位置。
        2. 数据库访问：当用户不知道最后系统采用哪一类的数据库，以及数据库可能有变化时。
        3. 设计一个连接服务器的框架，需要三个协议："POP3"、"IMAP"、"HTTP"，可以把这个作为产品类，共同实现一个接口。
    2.10 注意事项：
        1. 作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂模式。
        2. 复杂对象适合使用工厂模式，简单对象直接new。
        3. 使用工厂模式，就需要引进一个工厂类，增加系统的复杂性。

3.实现
    创建一个shape接口和实现shape接口的实体类。下一步就是定义工厂类shapeFactory。
    FactoryPatternDemo，通过演示类ShapeFactory来获取shape对象，它将向ShapeFactory传递信息（CIRCLE/RECTANGLE/SQUARE），以便获取它所需要的对象的类型。
    设计图为factory_patttern.jpg。

4.演示步骤：
    1. 创建一个接口：Shape
    2. 创建实现接口的实体类：
        Rectangle
        Square
        Circle
    3. 创建ShapeFactory工厂，用于生产Shape。
    4. 测试ShapeFactory。

5.学习心得：
    1. 工厂模式在实际工作中，最经常接触的应该就是日志了。
    2. 设计模式主要是针对接口编程，而不是针对实现类。
    3. 创建工厂的时候，方法返回的是Shape接口。

吕红红，你学会了吗？